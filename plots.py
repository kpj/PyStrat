"""
More elaborate plots based on the data
"""

import sys
import pickle
import collections

import numpy as np
import networkx as nx

import matplotlib as mpl
import matplotlib.pyplot as plt

from tqdm import tqdm


def takespread(sequence, num):
    length = float(len(sequence))
    for i in range(num):
        yield sequence[int(np.ceil(i * length / num))]

def plot_graph(data):
    graph = data['graph']

    plt.figure()
    plt.tick_params(axis='both', which='both', bottom='off', top='off', labelbottom='off', right='off', left='off', labelleft='off')
    pos = dict(zip(graph, graph))

    nx.draw_networkx_nodes(graph, pos, node_size=20, linewidths=.2)
    #nx.draw_networkx_labels(graph, pos, font_size=2)
    nx.draw_networkx_edges(graph, pos, alpha=.2)

    plt.savefig('images/graph.pdf')

def overview_plot(data):
    """ Plot result generated by simulation
    """
    N = data['config']['N']

    # compute statistics
    strat_nums = []
    for t, lattice in data['snapshots']:
        snum = np.unique(lattice).size
        strat_nums.append((t/N**2, snum))

    snapshots = list(takespread(data['snapshots'], 5))

    # plotting
    gs = mpl.gridspec.GridSpec(2, len(snapshots))

    for i, (t, lattice) in enumerate(sorted(snapshots)):
        ax = plt.subplot(gs[0, i])
        ax.imshow(lattice, interpolation='nearest')
        ax.set_title(r'$t={:d}$'.format(int(t/N**2)), fontsize=10)
        ax.tick_params(axis='both', which='both', labelsize=5)

    ax = plt.subplot(gs[1, :])
    ax.plot(*zip(*strat_nums))
    ax.set_xlabel(r'$t$')
    ax.set_ylabel('#strategies')

    plt.savefig('images/result.pdf')

def site_distribution(data):
    N = data['config']['N']
    alpha = data['config']['alpha']

    # aggregate data
    counts = collections.defaultdict(set)
    for t, lattice in tqdm(data['snapshots']):
        for strat in range(int(np.max(lattice))+1):
            raw = np.where(lattice==strat)
            res = set([idx for idx in zip(*raw)])
            counts[strat].update(res) #= counts[strat].union(res)
    counts = dict(counts)

    sites = []
    for strat, coords in counts.items():
        sites.append(len(coords))

    binning = np.bincount(sites)
    scale = np.array(sites)**-2.5

    # plot data
    plt.figure()

    plt.loglog(binning, 'o', label=r'$\alpha={}$'.format(alpha))
    plt.loglog(sites, scale, label=r'$s^{-2.5}$')

    plt.xlabel(r'$s$')
    plt.ylabel(r'$n$')
    plt.legend(loc='best')

    plt.savefig('images/site_distribution.pdf')

def main(fname):
    with open(fname, 'rb') as fd:
        data = pickle.load(fd)
    print('Parsing', len(data['snapshots']), 'entries')

    plot_graph(data)
    overview_plot(data)
    site_distribution(data)

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print('Usage: {} <data file>'.format(sys.argv[0]))
        exit(-1)

    main(sys.argv[1])
